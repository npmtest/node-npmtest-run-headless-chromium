{"/home/travis/build/npmtest/node-npmtest-run-headless-chromium/test.js":"/* istanbul instrument in package npmtest_run_headless_chromium */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-run-headless-chromium/lib.npmtest_run_headless_chromium.js":"/* istanbul instrument in package npmtest_run_headless_chromium */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_run_headless_chromium = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_run_headless_chromium = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-run-headless-chromium/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-run-headless-chromium && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_run_headless_chromium */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_run_headless_chromium\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_run_headless_chromium.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_run_headless_chromium.rollup.js'] =\n            local.assetsDict['/assets.npmtest_run_headless_chromium.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_run_headless_chromium.__dirname + '/lib.npmtest_run_headless_chromium.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-run-headless-chromium/node_modules/run-headless-chromium/headless-chromium.js":"/* jshint node:true */\n'use strict';\nvar child_process = require('child_process');\nvar path = require('path');\n\n// See README.md and https://nodejs.org/api/child_process.html for more info.\nexports.spawn = function(chromiumFlags, options) {\n  // Spawn a separate process because Xvfb modifies the environment variables,\n  // so running multiple instances may have side effects.\n  var args = [path.resolve(__dirname, 'run-headless-chromium.js')];\n  if (args) {\n    args = args.concat(chromiumFlags);\n  }\n  return child_process.spawn(process.execPath, args, options);\n};\n","/home/travis/build/npmtest/node-npmtest-run-headless-chromium/node_modules/run-headless-chromium/run-headless-chromium.js":"#!/usr/bin/env node\n'use strict';\nvar os = require('os');\nvar path = require('path');\nvar rmraf = require('rimraf');\nvar spawn = require('child_process').spawn;\nvar whichSync = require('which').sync;\nvar Xvfb = require('xvfb');\n\n// Chromium's output line format is defined as\n// [pid:tid:MMDD/hhmmss:tickcount:severity:source(lineno)] LOGMESSAGEHERE\n// pid, tid, tickcount are optional. For the console, source is always \"CONSOLE\".\n// http://src.chromium.org/viewvc/chrome/trunk/src/base/logging.cc?revision=265460&view=markup#l674\n// In Chrome 56, the format changed (milliseconds were added in the timestamp, and the timestamp is optional).\n// https://chromium.googlesource.com/chromium/src/+/dfb10e743132bac81702c2a3685f4c7c782d368f/base/logging.cc#765\nvar r_logMessageFormat = new RegExp(\n    '^\\\\[' +\n    // pid and tid are optional\n    '(?:\\\\d+:){0,2}' +\n    // We don't care about the date\n    '(?:\\\\d{4}/\\\\d{6}(?:\\\\.(?:\\\\d{3}){1,2})?:)?' +\n    // tickcount is optional\n    '(?:\\\\d+:)?' +\n    // Log severity = $1\n    '(INFO|WARNING|ERROR|ERROR_REPORT|FATAL|VERBOSE\\\\d*|UNKNOWN)' +\n    // source = $2 and line number = $3\n    ':(.*?)\\\\((\\\\d+)\\\\)' +\n    '\\\\] ' +\n    // Rest of line = $4\n    '(.*)$'\n);\n// Which non-console messages should also be printed to stdout?\n// By default, only errors are forwarded.\nvar r_logMessageSeverity = 'LOG_CR_VERBOSITY' in process.env ?\n                         new RegExp(process.env.LOG_CR_VERBOSITY) :\n                         /ERROR|ERROR_REPORT|FATAL/; \n// Ignore error messages from Chromium.\n// By default, all error messages from Chrome are printed as well.\n// If you want to hide all messages, set LOG_CR_HIDE_PATTERN=.\nvar r_logMessageIgnore = 'LOG_CR_HIDE_PATTERN' in process.env ? \n                         new RegExp(process.env.LOG_CR_HIDE_PATTERN, 'i') :\n                         /kwallet/i;\n\n// Patterns to be stripped from console messages.\nvar r_logMessageConsoleStart = /^\"/;\nvar r_logMessageConsoleEnd = /\", source: .*? \\(\\d+\\)$/;\n\n// Magic byte sequence at the end of a console message to signal that the\n// line has not ended yet.\nvar NOT_END_OF_LINE = '\\x03\\b';\n\n\n// Locate Chromium and determine flags to be used..\nvar chromiumBinary;\n[\n    // Allow override\n    process.env.CHROMIUM_EXE_PATH,\n    // Linux\n    'chromium',\n    'google-chrome',\n    'chromium-browser',\n    // OS X\n    '/Applications/Chromium.app/Contents/MacOS/Chromium',\n    '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\n].some(function(binary) {\n    try {\n        if (binary) {\n            whichSync(binary);\n            chromiumBinary = binary;\n            return true;\n        }\n    } catch (e) {\n    }\n});\n\nif (!chromiumBinary) {\n    console.error('Cannot find Chromium/Chrome executable. Please install it, or');\n    console.error('put its location in the CHROMIUM_EXE_PATH environment variable.');\n    process.exit(-1);\n}\n\ntry {\n    whichSync('Xvfb');\n} catch (e) {\n    console.error('Xvfb not found. Please install xvfb before trying again.');\n    process.exit(-1);\n}\n\nvar chromiumFlags = process.argv.slice(2);\nvar userDataDir = path.join(os.tmpdir(), 'chromium_headless_user_data_directory' + Math.random());\n(function checkFlagsToBePassedToChromium() {\n    if (!chromiumFlags.length) {\n        console.log('Usage: ' + process.argv[1].split('/').pop() + ' flags passed to Chromium');\n        console.log('Require at least one flag');\n        process.exit(-1);\n    }\n    if (!hasFlag('user-data-dir')) {\n        chromiumFlags.push('--no-first-run');\n        chromiumFlags.push('--user-data-dir=' + userDataDir);\n    }\n    if (!hasFlag('allow-file-access-from-files')) {\n        chromiumFlags.push('--allow-file-access-from-files');\n    }\n    // Direct error messages to stderr. Use verbosity at minimum 1 to catch\n    // JavaScript console messages.\n    chromiumFlags.push('--enable-logging=stderr');\n    if (!hasFlag('v')) {\n        chromiumFlags.push('--v=1');\n    }\n\n    function hasFlag(flagname) {\n        return process.argv.some(function(flag) {\n            flag = flag.split('=', 1)[0];\n            return flag == '--' + flagname;\n        });\n    }\n})();\n\n\n// Start the virtual X Framebuffer\nvar xvfb = new Xvfb({\n    silent: true,\n    // Use the same parameters as used by Chromium's test bots:\n    // https://src.chromium.org/viewvc/chrome/trunk/tools/build/scripts/slave/xvfb.py?revision=233700&#l75\n    xvfb_args: [\n        '-screen',\n        '0',\n        '1024x768x24',\n        '-ac'\n    ]\n});\nxvfb.start(function(err, xvfbProcess) {\n    if (err) {\n        console.error('Failed to start Xvfb: ' + err);\n        process.exit(-1);\n        return;\n    }\n\n    console.log('Starting Chromium...');\n\n    // Let's start Chromium...\n    var crProcess = spawn(chromiumBinary, chromiumFlags);\n    var crProcessExited = false;\n    crProcess.on('exit', function() {\n        crProcessExited = true;\n        quitXvfbAndChromium(-1);\n    });\n    process.once('SIGINT', function() {\n        if (!crProcessExited) {\n            // This should trigger the 'exit' event on crProcess, which in turn\n            // cleans up Xvfb.\n            crProcess.kill();\n        }\n        // If `crProcessExited` is true and we received the event, then we\n        // are still in the process of exiting Xvfb. So ignore the signal.\n    });\n    _toggle_crProcessEvents(true);\n    function _toggle_crProcessEvents(register) {\n        var methodName = register ? 'on' : 'removeListener';\n        crProcess.stdout[methodName]('data', handleOutput);\n        crProcess.stderr[methodName]('data', handleOutput);\n        crProcess.stdout[methodName]('end', flushBuffer);\n        crProcess.stderr[methodName]('end', flushBuffer);\n    }\n\n    var buffer = '';\n    function handleOutput(chunk) {\n        var lines = (buffer + chunk).split('\\n');\n        // The last character must be a newline. If it is not a newline, then the\n        // chunk is probably not complete, queue it for the next data event.\n        buffer = lines.pop();\n\n        // Parse and print all lines if needed.\n        lines.forEach(printLine);\n    }\n\n    function flushBuffer() {\n        if (buffer) {\n            printLine(buffer);\n        }\n    }\n\n    function printJsConsoleMessage(msg) {\n        if (msg.slice(-NOT_END_OF_LINE.length) == NOT_END_OF_LINE) {\n            process.stdout.write(msg.slice(0, -NOT_END_OF_LINE.length));\n        } else {\n            console.log(msg);\n        }\n    }\n\n    // Whether the last line was a message written to the JavaScript console.\n    var isJSConsole = false;\n    // Whether the last line is output from Chromium that is printed to stdout.\n    // True by default, so that output from e.g. --version is always printed.\n    var isAllowedOutput = true;\n    function printLine(line) {\n        var parsedline = r_logMessageFormat.exec(line);\n        if (!parsedline) {\n            // Continuation of last log message or end of line.\n            if (isJSConsole) {\n                line = line.replace(r_logMessageConsoleEnd, '');\n                printJsConsoleMessage(line);\n            } else if (isAllowedOutput && !r_logMessageIgnore.test(line)) {\n                console.log(line);\n            }\n            return;\n        }\n        var log_severity = parsedline[1];\n        var log_source = parsedline[2];\n        var log_lineno = parsedline[3];\n        var log_message = parsedline[4];\n\n        isJSConsole = log_source == 'CONSOLE';\n        if (isJSConsole) {\n            // Forward all JS console messages to stdout.\n            log_message = log_message.replace(r_logMessageConsoleStart, '');\n            log_message = log_message.replace(r_logMessageConsoleEnd, '');\n            printJsConsoleMessage(log_message);\n\n            if (log_severity == 'INFO') {\n                var completionMessage = /^All tests completed!(-?\\d*)$/.exec(log_message);\n                if (completionMessage) {\n                    var exitCode = completionMessage[1] & 0xFF;\n                    quitXvfbAndChromium(exitCode);\n                }\n            }\n        } else {\n            // Ignore non-JS console messages\n            // Ok, show Chrome errors if they appear, to prevent having failures and\n            // no debugging information at all.\n            isAllowedOutput = r_logMessageSeverity.test(log_severity) && !r_logMessageIgnore.test(log_message);\n            if (isAllowedOutput) {\n                console.log(log_severity + ':' + log_source + '(' + log_lineno + '): ' + log_message);\n            }\n        }\n    }\n\n    var hasQuitChromium = false;\n    function quitXvfbAndChromium(exitCode) {\n        if (hasQuitChromium) {\n            return;\n        }\n        hasQuitChromium = true;\n\n        _toggle_crProcessEvents(false);\n        xvfb.stop(function(err) {\n            if (err) {\n                console.error('Failed to stop Xvfb: ' + err);\n            }\n            if (!crProcessExited) {\n                console.error('Chromium process was still alive. Sending SIGKILL...');\n                crProcess.kill('SIGKILL');\n            }\n            rmraf(userDataDir, function(err) {\n                if (err) {\n                    console.error('Failed to remove ' + userDataDir + ': ' + err);\n                }\n                process.exit(exitCode);\n            });\n        });\n    }\n});\n"}